name: CMake

on: [push]
jobs:
  build_linux:
    runs-on: ubuntu-22.04
    container:
      image: debian:11-slim
      options: --user root

    steps:
    - name: Install dependencies
      run: |
        apt-get update
        apt-get install -y \
          git gcc-multilib g++-multilib \
          build-essential libc6-dev libc6-dev-i386 \
          cmake rsync
          
    - uses: actions/checkout@v4
      with:
        submodules: 'true'

    -
      name: Create Build Environment
      working-directory: ${{github.workspace}}
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ./build
      
    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{github.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake .. -DCMAKE_BUILD_TYPE=Release

    - name: Build
      working-directory: ${{github.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config Release --parallel
      
    - name: Deploy artifacts
      uses: actions/upload-artifact@v4
      with:
        name: linux
        path: ${{github.workspace}}/build/bin/hitbox_fix_mm_i386.so
          
  build_windows:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'true'

    -
      name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{github.workspace}}/build
      
    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{github.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake .. -A Win32 -DCMAKE_BUILD_TYPE=Release

    - name: Build
      working-directory: ${{github.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config Release --parallel
              
    - name: Deploy artifacts
      uses: actions/upload-artifact@v4
      with:
        name: windows
        path: ${{github.workspace}}/build/bin/Release/*.dll


  publish:
    name: 'Publish'
    runs-on: ubuntu-latest
    needs: [build_windows, build_linux]  
    if: startsWith(github.ref, 'refs/tags/')
    steps:  
      - name: Set env
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      - name: Deploying linux artifacts
        uses: actions/download-artifact@v4
        with:
          name: linux

      - name: Deploying windows artifacts
        uses: actions/download-artifact@v4
        with:
          name: windows
      
      - name: Archive artifacts
        run: |
          mkdir -p amxmodx/hitboxfixer vis
          cp hitbox_fix_mm.dll hitbox_fix_mm_i386.so amxmodx/hitboxfixer
          cp hitbox_vis.dll vis/hitbox_vis.asi
          7z a -tzip hitbox_fix-bin-${RELEASE_VERSION}.zip amxmodx vis
          
      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: test
          files: hitbox_fix-bin-*.zip
